{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Dimensions from \"./Dimensions\";\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(function () {\n    return Dimensions.get('window');\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      dimensions = _useState2[0],\n      setDimensions = _useState2[1];\n\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n\n      if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n        setDimensions(window);\n      }\n    }\n\n    Dimensions.addEventListener('change', handleChange);\n    handleChange({\n      window: Dimensions.get('window')\n    });\n    return function () {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, [dimensions]);\n  return dimensions;\n}","map":{"version":3,"sources":["/home/joao/APP-BARDOCK-CURSOS/node_modules/react-native/Libraries/Utilities/useWindowDimensions.js"],"names":["Dimensions","useEffect","useState","useWindowDimensions","get","dimensions","setDimensions","handleChange","window","width","height","scale","fontScale","addEventListener","removeEventListener"],"mappings":"AAUA;;;AAEA,OAAOA,UAAP;AAEA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAEA,eAAe,SAASC,mBAAT,GAA+C;AAC5D,kBAAoCD,QAAQ,CAAC;AAAA,WAAMF,UAAU,CAACI,GAAX,CAAe,QAAf,CAAN;AAAA,GAAD,CAA5C;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACd,aAASM,YAAT,OAAgC;AAAA,UAATC,MAAS,QAATA,MAAS;;AAC9B,UACEH,UAAU,CAACI,KAAX,KAAqBD,MAAM,CAACC,KAA5B,IACAJ,UAAU,CAACK,MAAX,KAAsBF,MAAM,CAACE,MAD7B,IAEAL,UAAU,CAACM,KAAX,KAAqBH,MAAM,CAACG,KAF5B,IAGAN,UAAU,CAACO,SAAX,KAAyBJ,MAAM,CAACI,SAJlC,EAKE;AACAN,QAAAA,aAAa,CAACE,MAAD,CAAb;AACD;AACF;;AACDR,IAAAA,UAAU,CAACa,gBAAX,CAA4B,QAA5B,EAAsCN,YAAtC;AAIAA,IAAAA,YAAY,CAAC;AAACC,MAAAA,MAAM,EAAER,UAAU,CAACI,GAAX,CAAe,QAAf;AAAT,KAAD,CAAZ;AACA,WAAO,YAAM;AACXJ,MAAAA,UAAU,CAACc,mBAAX,CAA+B,QAA/B,EAAyCP,YAAzC;AACD,KAFD;AAGD,GAnBQ,EAmBN,CAACF,UAAD,CAnBM,CAAT;AAoBA,SAAOA,UAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport Dimensions from './Dimensions';\nimport {type DisplayMetrics} from './NativeDeviceInfo';\nimport {useEffect, useState} from 'react';\n\nexport default function useWindowDimensions(): DisplayMetrics {\n  const [dimensions, setDimensions] = useState(() => Dimensions.get('window'));\n  useEffect(() => {\n    function handleChange({window}) {\n      if (\n        dimensions.width !== window.width ||\n        dimensions.height !== window.height ||\n        dimensions.scale !== window.scale ||\n        dimensions.fontScale !== window.fontScale\n      ) {\n        setDimensions(window);\n      }\n    }\n    Dimensions.addEventListener('change', handleChange);\n    // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n    handleChange({window: Dimensions.get('window')});\n    return () => {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, [dimensions]);\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}